<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>深度学习分享</title>
    <link href="/2023/10/01/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%88%86%E4%BA%AB/"/>
    <url>/2023/10/01/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%88%86%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<p>深度学习分享：</p><p>你怎么不找我说话啊！！！！20231002-15：06</p><p>俩小时了，好难熬啊！！！！20231002-17：07</p><p>怎么通俗易懂的给从没有接触过深度学习的同事们介绍深度学习，是个让人非常头疼的问题。</p><h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><p>机器学习，顾名思义，机器具备有学习的能力。具体来讲，机器学习就是让机器具备找一个函数的能力。</p><p>以图像识别为例，图像识别函数的输入是一张图片，输出是这个图片里面的内容。根据要找的函数不同，机器学习有不同的类别。假设要找的函数的输出是一个数值，这种机器学习的任务称为回归。函数的输出就是从设定好的选项里面选择一个当作输出，该任务称为分类。</p><p>机器学习找函数的过程，分成3 个步骤。第一个步骤是写出一个带有未知参数的函数$\f$，其能预测未来点击次数。比如将函数写成</p><h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><h2 id="卷积神经网络"><a href="#卷积神经网络" class="headerlink" title="卷积神经网络"></a>卷积神经网络</h2><h2 id="循环神经网络"><a href="#循环神经网络" class="headerlink" title="循环神经网络"></a>循环神经网络</h2><h2 id="自注意力机制"><a href="#自注意力机制" class="headerlink" title="自注意力机制"></a>自注意力机制</h2><h2 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h2><h2 id="生成对抗模型GAN"><a href="#生成对抗模型GAN" class="headerlink" title="生成对抗模型GAN"></a>生成对抗模型GAN</h2><h2 id="ChatGPT"><a href="#ChatGPT" class="headerlink" title="ChatGPT"></a>ChatGPT</h2><h2 id="深度学习对底软的能力提升："><a href="#深度学习对底软的能力提升：" class="headerlink" title="深度学习对底软的能力提升："></a>深度学习对底软的能力提升：</h2><h3 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h3><h3 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h3><h3 id="代码查错"><a href="#代码查错" class="headerlink" title="代码查错"></a>代码查错</h3><h2 id="GAI对软硬件设计的影响"><a href="#GAI对软硬件设计的影响" class="headerlink" title="GAI对软硬件设计的影响"></a>GAI对软硬件设计的影响</h2><p>聊聊**生成式AI(GAI)**对今后<a href="https://www.zhihu.com/search?q=%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22618256622%22%7D">软件设计</a>的影响。看了很多业界人士对未来的预测和判断，都感觉有局限性。</p><p>这两天在网上看到一篇让人脑洞大开的文章《ChatGPT会在10年内取代程序员》，文章提了两个人们在ChatGPT之类的GAI在软件开发方面的谬误。</p><ul><li>第一个谬误是“当前的AI会产生bug”，甚至有些代码还不能完全复制粘贴来使用，所以AI不会取代程序员。那么其实人也会产生bug（无论是有意为之还是为了保全工作）。所以有bug的代码并不会阻止GAI最终取代程序员。</li><li>二个谬误观点是GAI是用来帮助程序员提高效率的工具。那么从老板的角度来看，如果有机器替代的话，高收入的程序员群体是老板眼中首先要节约的“成本”。尤其是因为软件工程是<strong>数字化的，可指数级扩展的工程问题</strong>。这类工作是AI替代的完美目标。</li></ul><p>作者对于未来的预测可以这么总结：</p><p>阶段0：原型期（2023年第一季度）失业率预测：2%</p><p>虽然当前chatGPT还仅仅是基于浏览器的AI工具且并不稳定，但当微软，谷歌以及每个科技和创业公司都想加入竞争的时候，chatGPT类的GAI演进速度会加快。那么当前受影响的是基于搜索的广告业务，<a href="https://www.zhihu.com/search?q=%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E5%B8%88&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22618256622%22%7D">软件工程师</a>还比较安全。</p><p>阶段1：规模化的<a href="https://www.zhihu.com/search?q=%E9%9B%86%E6%88%90%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22618256622%22%7D">集成开发环境</a>（IDE）渗透（2023年第二到第四季度） 失业率预测：5%</p><p>这时Copilot，codex及众多的IDE GAI工具将会广泛使用。有大量的Java等语言的样板代码。AI拥有程序上下文分析的能力，GAI将会首先通过微软工具套件等形式被集成。生产力大幅提高，工程速度加快，但项目暂时不会因为提早完成而大量裁员。大多数人还有短暂的安全。</p><p>阶段2：高级IDE工具开发与整合（1-2年）失业率预测：25%</p><p>该阶段IDE会越来越强大，能分析整个代码库的上下文环境，并提供100%覆盖率的单元测试。编写程序的语言不再重要，用python快速实现的想法，瞬间可以被重写成其他效率更高的代码。真正的**工程清洗( engineering purge)**开始，低效的和拒绝AI的开发者将首当其冲。通用性的软件工程（如web前后端）将是多米诺骨牌的第一张，其次是手机应用开发。VR及游戏等专才仍然安全。</p><p>阶段3：<a href="https://www.zhihu.com/search?q=%E8%BD%AF%E4%BB%B6%E5%8D%B3%E6%9C%8D%E5%8A%A1&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22618256622%22%7D">软件即服务</a>（SaaS）和无代码阶段（2-5年）失业率预测：75%</p><p>阶段2所遗留下的代码库已经重新被重写和更换。存留下来的代码库在测试覆盖率，安全性及标准化等各个方面都全面碾压前人。软件将不再需要文档。AI一直在基于用户的使用模式，优化自身。软件开发更关注业务本身，一句话就可以生成类似今日头条类的新闻推送系统。没人做全栈了，移动设备<a href="https://www.zhihu.com/search?q=app%E5%BC%80%E5%8F%91&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22618256622%22%7D">app开发</a>也消失了，开发者转向如机器人及生物技术等专业方向。不会编程的人士只要有好的业务想法，AI便可帮忙实现。</p><p>阶段4: 原生AI（5-10年）失业率预测：95%</p><p>这个阶段的代码不再由人类维护，单元测试和工程文档这类的事物也早都过时。AI代码并不需要使用人类能理解的汇编及高级语言。更原生的AI指令集会使得软硬件及编译器皆为AI所用，协同优化。写代码将会像公园里的<a href="https://www.zhihu.com/search?q=%E8%92%B8%E6%B1%BD%E7%81%AB%E8%BD%A6&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22618256622%22%7D">蒸汽火车</a>一样，仅仅是为了缅怀和记忆。</p><p>阶段5: 热寂（Heat Death）（10年以后）失业率预测：99%</p><p>软件早已无法识别。AI原生标准已经全球化。钢铁侠般的实验室里，AI会通过跟你聊天来完成你想要完成的任务。web 3.0也会在AI的推动下提前到来。</p><p>这些东西我们没法真正的预测，但对于底层软件工程师来说，写代码也仅仅只是最基础的环节。和硬件的交互，和各个流程的人沟通这些GAI都很难做到，我想，很多时候我们不能把我他以后发展真正的趋势，可以去拥抱他，先探索着利用他提升我们整体的效能。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Deep Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>字符设备驱动</title>
    <link href="/2023/10/01/%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/"/>
    <url>/2023/10/01/%E5%AD%97%E7%AC%A6%E8%AE%BE%E5%A4%87%E9%A9%B1%E5%8A%A8/</url>
    
    <content type="html"><![CDATA[<img src="/yzb/北京云.jpg" style="zoom:80%;" /><p>你根本照顾不好自己，只有我才行。你电动牙刷每天一周了，我好久没去，再次去的时候还是没电，我如果不充，你要手动多久呐？</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux Kernel Driver</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>广东注意事项</title>
    <link href="/2023/10/01/%E5%B9%BF%E4%B8%9C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <url>/2023/10/01/%E5%B9%BF%E4%B8%9C%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    
    <content type="html"><![CDATA[<p>点餐后问告诉服务员不要生姜，葱，胡椒。</p><p>卜卜贝</p><p><del>小龙虾</del></p><p>夜市</p><p>深圳沙滩</p><p>摩天轮</p><p>木屋烧烤</p><p><del>榴莲椰子鸡</del></p><p>日料</p><p><del>寿司</del></p><p><del>西塔老太太烤肉</del></p><p><del>铜锣烧</del></p><p><del>螺蛳粉火锅</del></p><p>哈根达斯巧克力</p><p>冰淇凌巧克力火锅</p><p><del>jellycat</del></p><p><del>酱香拿铁</del></p><p>爆炸头企鹅</p><p><del>pigu</del></p><p>小海豹没有冲浪板</p><p><del>接含娃之前买jelly cat</del></p><p>甜甜圈 花生 海星 云朵 茄子</p><p>海南海边</p><p>威海海边</p><p>青岛海边</p><p>潮汕</p><p>牛腩煲</p><p>笨的很，还有这么多未完成！</p><p>睡醒了突然想到你的膝盖，以前受过伤，是不是年纪大了会不舒服。什么都记不得吃，维生素买了也忘了吃，自己不舒服的地方也不关心。</p><p>想买些骨胶原，发现根本也没有用😶为什么会这么喜欢一个人呢？好奇怪，搞不懂。</p><p>桔钓沙</p><img src="/imgs/广东计划/金钓沙露营计划.jpg" style="zoom:33%;" /><p><img src="/imgs/%E5%B9%BF%E4%B8%9C%E8%AE%A1%E5%88%92/%E6%A1%94%E9%92%93%E6%B2%99.jpg"></p><p>露营计划要到十月21号22号，含娃参加完婚礼回来。这几天去人太多，体验很差（2023-10-2）</p><p>第二个计划是不露营，住海边的酒店，晚上可以看海。计划2023年十月二十一号。</p><p><img src="/imgs/%E5%B9%BF%E4%B8%9C%E8%AE%A1%E5%88%92/%E6%A1%94%E9%92%93%E6%B2%992.jpg"></p><p>鹿嘴山庄</p><p><img src="/imgs/%E5%B9%BF%E4%B8%9C%E8%AE%A1%E5%88%92/%E9%B9%BF%E5%98%B4%E5%B1%B1%E5%BA%841.jpg"></p><p><img src="/imgs/%E5%B9%BF%E4%B8%9C%E8%AE%A1%E5%88%92/%E9%B9%BF%E5%98%B4%E5%B1%B1%E5%BA%842.jpg"></p><p>鹿嘴山庄很晒，要去要到十一月份再带lyh去。</p>]]></content>
    
    
    
    <tags>
      
      <tag>生活注意事项</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MissingLi</title>
    <link href="/2023/09/30/MissingLi/"/>
    <url>/2023/09/30/MissingLi/</url>
    
    <content type="html"><![CDATA[<p><img src="/imgs/%E5%BF%83%E6%83%85%E8%AE%B0%E5%BD%95/%E5%BD%A9%E8%99%B9.jpg"></p><p>今天学校里出现了两个彩虹，含娃。</p><p>我根本舍不得不找你，我根本舍不得不理你。</p><p>我根本不敢找你，我好想你！</p><p>我根本不敢找你说那么多次我爱你！你能猜到我会把话都写到这吧？</p><p>看到你发消息，我来回的看，不敢点进去，我怕忍不住跟你说一大堆。</p><p>好好玩吧！我可以再等等的！</p><img src="/imgs/心情记录/心情2.png" style="zoom:33%;" /><img src="/imgs/心情记录/心情1.png" alt="..\imgs\心情1" style="zoom:33%;" /><img src="/imgs/心情记录/心情5.jpg" style="zoom:33%;" /><p>我有好多话要说啊!我好想你啊!</p><p>我知道我要等下去,</p><p>上一次,我等了三十年呢</p><p>很多次的感受跟现在一样.</p><p>我们以后一定会是一家人.</p><p>—————————————————2023-10-1———————————<br>我已经接受自己的情绪了奥，我接受自己很喜欢你件事，已经很厉害了！！！！</p><p>现在看来，</p><p>我的人生有三个遗憾：</p><p>不会开车，没法载着你去各种你想去的地方。</p><p>学历太低，后悔没去个自己尽力才能去到的学校。</p><p>为什么不能早点遇到你，我好想在人生的前25年就能好好保护你啊。</p><p>还好我还有60年可以弥补，即使不能娶你回家，也要把你当作我的好大儿，一直努力走下去吧！</p><p>今天力竭了，跑了30公里，我知道一直爱你下去是一件很难的事，可是我的这一生好像只有你一个家人了呀，我要试试自己有多大的决心，看来我还是赢了，30公里只要我还有意志就可以做到，爱你也是！！！我的含娃啊！我才不要回报，我就要一直陪着你！</p>]]></content>
    
    
    
    <tags>
      
      <tag>MetLee</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>头脑特工队观赏报告(重要)</title>
    <link href="/2023/09/29/%E5%A4%B4%E8%84%91%E7%89%B9%E5%B7%A5%E9%98%9F%E8%A7%82%E8%B5%8F%E6%8A%A5%E5%91%8A-%E9%87%8D%E8%A6%81/"/>
    <url>/2023/09/29/%E5%A4%B4%E8%84%91%E7%89%B9%E5%B7%A5%E9%98%9F%E8%A7%82%E8%B5%8F%E6%8A%A5%E5%91%8A-%E9%87%8D%E8%A6%81/</url>
    
    <content type="html"><![CDATA[<p>被遗忘的想象会被送去记忆垃圾场，清理工拿走bing bond的音乐火箭，认为rilay不在需要它，bingbong惊慌的追上去也没能阻止。bingbong看着跌落深渊的火箭，一下跌坐在地上。我不知道为什么，看一个电影，我总是不能抓住主线，我看到这么一个小插曲，都会想到自己做的梦，我也惊慌的拉着很大的货轮，拉了很久很久，手上全是泡，还是没有把你留下。可能我当时的心情跟这个粉色小猪很像吧。</p><p><img src="/imgs/%E5%A4%B4%E8%84%91%E7%89%B9%E5%B7%A5%E9%98%9F/rilay2.png"></p><p>我打了好多好多字啊，</p><p>可我都删了。</p><p>我想说很多话，有时候都说不出来。</p><p>就像我一直很想你，但我不敢老去找你聊天，我怕你讨厌我。</p><p>内心的复杂，是多么纤细而又值得赞颂的。</p><p>”替我把她送上月球好吗？“bingbong自己跳下火车，在记忆垃圾堆里，自己快要消失的时候对joy说的。我不知道是不是这样啊，喜欢一个人走那么久，真的不会累。我跑的很快，我怕咖啡会凉，我狠狠的跑，一点也不累，你不知道我那会儿我有多幸福，被电车撞上的时候我狠狠的护住咖啡，如果咖啡被打翻，我该有多难过啊。有时候，我很想很想很想自己也可以做的很好，像bingbong这样，为你狠狠的付出。我总是犯病，总是让你也很难受。我好笨啊。</p><p><img src="/imgs/%E5%A4%B4%E8%84%91%E7%89%B9%E5%B7%A5%E9%98%9F/rilay1.png"></p><p>Rilay拒绝了内心的感受，开始变得冷漠，她没有愤怒，没有害怕也不在乎任何事，这样真的很酷啊，像以前的我一样？没有情绪，不会害怕任何事，因为根本不在乎。高中坐在垃圾桶旁边也不在乎，读研被大家网暴也不在乎，身体快不行了也不在乎，什么都不怕，什么都不在乎。没有感情奥，跟别人对我的称呼一样奥。没想过娶妻生子，没想过和哪个人共度一生，没想过生命怎么结束，没想过以后会怎样，因为我什么都不在乎，没有家人也不需要家人，没有情绪也不需要情绪。</p><p>我以为我会一直这样，直到我兜兜转转。</p><p>遇到你的时候，</p><p>我发现我好想跟你玩啊？</p><p>我不想听二手的话，我只想听你说的，我不想让夏於丹传话。我好想跟你说说话啊，我好想粘着你啊？</p><p>你不跟我说话，我发现自己会紧张，看到你不舒服，我会很局促。</p><p>哦，我发现我也有了很多情绪，我第一次很紧张很紧张，是我那天要去跟你到星巴克喝咖啡，我整晚不想睡觉，一直等时针转到早上七点，</p><p>原来紧张是这样，我以前真的很厉害，我不关心别人，不关心自己，就不会紧张。</p><p>那天，我用梳子给你梳头，吹头发，我感觉自己我比京爷都要幸福，我发现自己也想要一个家，想自己后半生可以每天像这样照顾你，照顾女儿，每天给你们做饭，吹头，按摩，梳头，带你们去玩。</p><p>谢谢你，lyh，带给我这么多完整的情绪。</p><p>搜到这个动画，看着奇怪的画风，让我很难点进去看，还好是含娃让我看的，不然我可能就错过了。</p><p>头脑特工队的导演是从他女儿那得到的灵感，也意图将这部动画做给他女儿。Rilay的一生很多奇妙的情感，长大的过程就是道别的过程，和曾经喜欢的一些东西一一道别。我做过一个很久的梦，梦里，我陪你度过了30年的青春，至少那一次我陪着你走完了我的一生，接下来的一生，我们还有很多时间，我不要跟你道别，因为我们是一家人，我们家现在只有我们两个人。我要好好陪着你，反正你拒绝也没有用，你可管不住我。</p><p><img src="/imgs/%E5%BF%83%E6%83%85%E8%AE%B0%E5%BD%95/%E5%BF%83%E6%83%854.png"></p><p>最近总做梦</p><p>做了一个很短的梦</p><p>梦到我在公司加班</p><p>上电梯的时候电梯在四楼坏了一直往下坠</p><p>电梯里就我一个人</p><p>我重重的跟电梯一起坠到了一楼</p><p>头顶的钢板把我砸晕了</p><p>昏迷了好久好久</p><p>公司给紧急联系人打电话</p><p>我的紧急联系人是已经去世的外婆</p><p>找不到紧急联系人</p><p>不知怎么的，爸爸妈妈还是得到了这个消息，火急火燎的坐飞机来深圳</p><p>结果在飞机上出了意外</p><p>我昏迷后 醒来了</p><p>啥也不记得</p><p>我看到你在病床旁边陪着我高兴坏了</p><p>我跟你讲：“我做了个梦，梦到自己在公司出了意外电梯坠毁了，父母也在赶来的路上去世了。”</p><p>“还好是个梦，这个梦还挺好，我们俩在一个城市工作，25岁还有父母，多想一直活着梦里。”</p><p>“昨天我以为我肺炎要去世了，怎么也想不起来漪怎么写。我怎么也写不出来，好难过啊，明天我们是不是要结婚了。”</p><p>你跟我说：“你明天要跟我结婚，肺炎去世才是个梦。”</p><p>“你现在就是才25岁被电梯砸伤了，我就来看看你而已。还有就是你现在25岁也没有父母了，他们来深圳的飞机上出意外了😶”</p>]]></content>
    
    
    
    <tags>
      
      <tag>MetLee</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux驱动-构造和运行模块个人学习总结</title>
    <link href="/2023/09/29/Linux%E9%A9%B1%E5%8A%A8-%E6%9E%84%E9%80%A0%E5%92%8C%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%9D%97%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>/2023/09/29/Linux%E9%A9%B1%E5%8A%A8-%E6%9E%84%E9%80%A0%E5%92%8C%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%9D%97%E4%B8%AA%E4%BA%BA%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>我发现对于学习任何一门知识，在最开始只能背诵或抄写别人的一些总结，所以tyro阶段我会抄写一些别人的文章，进行复习总结。<br></p><p>我记得小时候看过一部电影《心灵捕手》，虽然主线剧情不是我要说的，但我仍然记者记忆中有个桥段，Will在哈佛附近的酒吧遇到Skylar的时候，Will最铁的哥们查克冒充历史系学生和美女Skylar搭讪，但哈佛大学的学生克拉克看破了查克是冒牌货，于是过来考查克历史学知识，Will不止回答了这些知识，还输出了一顿自己的理解。我一直不明白，同为学生时代的我们，究竟会有什么差距呢，后来看到这一段，我才发现，只有能输出自己的东西才算是在这个领域有所了解了吧？所以tyro阶段我也只能摘抄一些别人消化的知识点，多希望我也能有一天输出自己的东西。</p><p><img src="/imgs/%E5%A4%96%E8%AE%BE%E9%A9%B1%E5%8A%A8%E5%BC%80%E5%8F%91/%E5%BF%83%E7%81%B5%E6%8D%95%E6%89%8B.webp"></p><p><small>提到《心灵捕手》我又想到:<br><br>你年轻彪悍，我如果和你谈论战争，你大可以向我大抛莎士比亚，背诵“共赴战场，亲爱的朋友”，但你从未亲临战阵，未试过把挚友的头拥入怀里，看着他吸着最后一口气，凝望着你，向你求助。不要以为，我了解你。也许我可以通过“知识”来看你，但那不是你，除非你愿意谈谈你自己，否则我不知道你到底是谁。有时候喜欢是一种非常简单的事，我没有进入过你的世界，只听你讲过自己的故事，你人生的前25年从未参与过，我喜欢的只是我所认识的25岁的你。我不知道为什么，我真真实实的做了一场梦，很久很久的梦，我把人生的25年从头过了一遍，非常真切的感受，30年的人生所有的故事主角都是你，我才发现，我的这份喜欢似乎是贯彻了这痛苦的一生。</small></p><p><small>ANY WAY，写这些东西的时候我的状态是非常不好的，最近这两年我失去了爱我的外婆，得了很多很重的疾病，毕业选择的第一家公司在春招结束的时候解散了，还有一个她。在这之前我的世界没有什么情绪，对生活也没有热情，感谢她给我平庸的人生带来了一些阳光。让我捡起来对生活的热爱，谢谢你，u complete me。人生太多变化，不知道还能在一起多久，我们已经是家人了吧，不要忘记我奥，死亡不是真的逝去，遗忘才是永恒的消亡。</small></p><h1 id="构造和运行模块"><a href="#构造和运行模块" class="headerlink" title="构造和运行模块"></a>构造和运行模块</h1><h3 id="内核模块与应用程序的对比"><a href="#内核模块与应用程序的对比" class="headerlink" title="内核模块与应用程序的对比"></a>内核模块与应用程序的对比</h3><p>大多数中小规模的应用程序是从头到尾执行单个任务。<strong>模块只是预先注册自己以便服务于将来的某个请求</strong>，然后其初始化函数立即结束，模块的退出函数将在模块被卸载之前调用。<strong>内核模块的编程方式和事件驱动的编程有些类似。</strong><br>应用程序在退出时可以不管资源的释放或其他的清除工作。但<strong>模块的退出函数必须仔细撤销初始化函数所作的一切</strong>，否则，在系统重新引导之前某些东西就会残留在系统中。<br>应用程序可以调用它并未定义的函数，因为连接过程能够解析外部引用从而使用适当的函数库。但<strong>模块仅被链接到内核，它能调用的函数仅仅是由内核导出的那些函数，而不存在任何可链接的函数库。</strong><br>模块源文件中不能包含通常的头文件，只能使用作为内核一部分的函数。<br>应用程序开发过程中的段错误是无害的，并且总是可以使用调试器跟踪到源代码中的问题所在；内核错误即使不影响整个系统，也至少会杀死当前进程。</p><h4 id="可重入"><a href="#可重入" class="headerlink" title="可重入"></a>可重入</h4><p>可重入性作为多线程编程里面重要的概念，相信大家或多或少都听说过、研究过甚至使用过。目前很多资料都重点在介绍重入锁、CAS等概念，对“可重入性”本身的讲解不是很多，所以JavaCool给大家整理了一些“可重入性”的相关知识，希望能帮助到大家！</p><ul><li><p>可重入的定义<br>简单定义:”可以正确重复使用”，有两个关键：1，可以重复使用；2，并能正确使用。意味着在多次执行的时候能得到正确的值，并不受其他调用的影响。<br>官方定义：若一个程序或子程序可以“在任意时刻被中断然后操作系统调度执行另外一段代码，这段代码又调用了该子程序不会出错”，则称其为可重入（reentrant或re-entrant）的。即当该子程序正在运行时，执行线程可以再次进入并执行它，仍然获得符合设计时预期的结果。与多线程并发执行的线程安全不同，可重入强调对单个线程执行时重新进入同一个子程序仍然是安全的。<br>这里也有一段比较好的英文阐释：<br>A computer program or routine is described as reentrant if it can be safely called again before its previous invocation has been completed (i.e it can be safely executed concurrently)<br>可重入函数主要用于多任务环境中，一个可重入的函数简单来说就是可以被中断的函数，也就是说，可以在这个函数执行的任何时刻中断它，转入OS调度下去执行另外一段代码，而返回控制时不会出现什么错误；而不可重入的函数由于使用了一些系统资源，比如全局变量区，中断向量表等，所以它如果被中断的话，可能会出现问题，这类函数是不能运行在多任务环境下的。</p></li><li><p>产生背景<br>可重入概念是在单线程操作系统的时代提出的。一个子程序的重入，可能由于自身原因，如执行了jmp或者call，类似于子程序的递归调用；或者由于操作系统的中断响应。UNIX系统的signal的处理，即子程序被中断处理程序或者signal处理程序调用。所以，可重入也可称作“异步信号安全”。这里的异步是指信号中断可发生在任意时刻。 重入的子程序，按照后进先出线性序依次执行。</p></li><li><p>编写可重入代码注意的条件<br>若一个函数是可重入的，则该函数应当满足下述条件：</p></li></ul><p>不能含有静态（全局）非常量数据。<br>不能返回静态（全局）非常量数据的地址。<br>只能处理由调用者提供的数据。<br>不能依赖于单实例模式资源的锁。<br>调用(call)的函数也必需是可重入的。<br>上述条件就是要求可重入函数使用的所有变量都保存在呼叫堆叠的当前函数栈（frame）上，因此同一执行线程重入执行该函数时加载了新的函数帧，与前一次执行该函数时使用的函数帧不冲突、不互相覆盖，从而保证了可重入执行安全。</p><p>多“用户&#x2F;对象&#x2F;进程优先级”以及多进程（Multiple processes），一般会使得对可重入代码的控制变得复杂。同时，IO代码通常不是可重入的，因为他们依赖于像磁盘这样共享的、单独的（类似编程中的静态、全域）资源。</p><ul><li>与线程安全的关系<br>可重入与线程安全两个概念都关系到函数处理资源的方式。但是，他们有重大区别：可重入概念会影响函数的外部接口，而线程安全只关心函数的实现。大多数情况下，要将不可重入函数改为可重入的，需要修改函数接口，使得所有的数据都通过函数的调用者提供。要将非线程安全的函数改为线程安全的，则只需要修改函数的实现部分。一般通过加入同步机制以保护共享的资源，使之不会被几个线程同时访问。</li></ul><p>操作系统背景与CPU调度策略：<br>可重入是在单线程操作系统背景下，重入的函数或者子程序，按照后进先出的线性序依次执行完毕。</p><p>多线程执行的函数或子程序，各个线程的执行时机是由操作系统调度，不可预期的，但是该函数的每个执行线程都会不时的获得CPU的时间片，不断向前推进执行进度。可重入函数未必是线程安全的；线程安全函数未必是可重入的。</p><p>例如，一个函数打开某个文件并读入数据。这个函数是可重入的，因为它的多个实例同时执行不会造成冲突；但它不是线程安全的，因为在它读入文件时可能有别的线程正在修改该文件，为了线程安全必须对文件加“同步锁”。<br>另一个例子，函数在它的函数体内部访问共享资源使用了加锁、解锁操作，所以它是线程安全的，但是却不可重入。因为若该函数一个实例运行到已经执行加锁但未执行解锁时被停下来，系统又启动该函数的另外一个实例，则新的实例在加锁处将转入等待。如果该函数是一个中断处理服务，在中断处理时又发生新的中断将导致资源死锁。fprintf函数就是线程安全但不可重入。</p><ul><li>可重入锁<br>可重入锁也叫递归锁，它俩等同于一回事，指的是同一线程外层函数获得锁之后，内层递归函数仍然能获得该锁的代码，同一线程在外层方法获取锁的时候，再进入内层方法会自动获取锁。也就是说，线程可以进入任何一个它已经拥有的锁所同步着的代码块。ReentrantLock 和 synchronized 就是典型的可重入锁！</li></ul><p><strong>操作系统的作用</strong>是</p><ul><li>为应用程序提供一个对计算机硬件的一致视图</li><li>负责程序的独立操作并保护资源不受非法访问。该任务只有在CPU能够保护系统软件不受应用程序破坏时才能完成。</li></ul><p>人们在CPU中实现不同的操作模式（或者级别）。不同的级别具有不同的功能，在较低的级别中将禁止某些操作。程序代码只能通过有限数目的“门” 从一个级别切换到另一级别。Unix使用了两个这样的级别：内核运行在最高级别（也称作超级用户态），可以进行所有操作；应用程序运行在最低级别（即所谓的用户态），处理器控制着对硬件的直接访问以及对内存的非授权访问。两种模式具有不同的优先权等级，每个模式都有自己的内存映射，即自己的地址空间。</p><p>应用程序执行系统调用或者被硬件中断挂起时，Unix将执行模式从用户空间切换到内核空间</p><ul><li>执行系统调用的内核代码运行在进程上下文中，它代表用户进程执行操作，因此可以访问进程地址空间的所有数据</li><li>处理硬件中断的内核代码和进程是异步的，与任何一个特定进程无关。</li></ul><p>一个驱动程序通常要执行两类任务</p><ul><li>某些函数作为系统调用的一部分而执行</li><li>其他函数负责中断处理</li></ul><h3 id="内核中的并发"><a href="#内核中的并发" class="headerlink" title="内核中的并发"></a>内核中的并发</h3><p>内核编程区别于常见应用程序编程的地方在于对并发的处理。即使是最简单的内核模块，都需要在编写时铭记：同一时刻，可能会有许多事情正在发生。</p><h5 id="内核编程必须考虑并发的原因"><a href="#内核编程必须考虑并发的原因" class="headerlink" title="内核编程必须考虑并发的原因"></a>内核编程必须考虑并发的原因</h5><ul><li><p>Linux系统中通常正在运行多个并发进程，他们可能同时使用我们的驱动程序。</p></li><li><p>大多数设备能够中断处理器，而中断处理程序异步运行，而且可能在驱动程序试图处理其他任务时被调用。</p></li><li><p>一些抽象软件，例如内核定时器，也在异步运行。</p></li><li><p>Linux可以运行在SMP系统上，可能同时有不止一个CPU运行我们的驱动程序。</p></li><li><p>在2.6中内核代码已经是可抢占的，意味着即使在单处理器系统上也存在许多类似多处理器系统的并发问题。</p></li></ul><p>Linux内核代码（包括驱动程序代码）必须是可重入的，它必须能够同时运行在多个上下文中。对编写正确的内核代码来说，优良的并发管理是必需的。</p><h4 id="当前进程"><a href="#当前进程" class="headerlink" title="当前进程"></a>当前进程</h4><p>虽然内核模块不像应用程序那样顺序执行，然而内核执行的大多数操作还是和某个特定的进程相关。<br>内核代码可通过访问全局项current来获得当前进程。它是一个指向struct task_struct的指针。current指针指向当前正在运行的进程。内核代码可以通过current获得与当前进程相关的信息。例如，下面的语句通过访问struct task_struct的某些成员来打印当前进程的ID和命令名：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">printk(KERN_INFO <span class="hljs-string">&quot;The process is \&quot; %s \&quot; (pid %i)\n&quot;</span>,<br>current-&gt;common,current-&gt;pid);<br></code></pre></td></tr></table></figure><p>为了支持SMP系统，内核开发这设计了一种能找到运行在相关CPU上的当前进程的机制。它必须是快速的，因为对current的引用会很频繁。一种不依赖于特定架构的机制通常是，<strong>将指向task_struct结构的指针隐藏在内核栈中</strong>。</p><h2 id="编译和装载"><a href="#编译和装载" class="headerlink" title="编译和装载"></a>编译和装载</h2><h3 id="编译模块"><a href="#编译模块" class="headerlink" title="编译模块"></a>编译模块</h3><p>内核是一个大的、独立的程序，为了将它的各个片段放在一起，要满足很多详细而明确的要求。</p><p>在构造内核模块之前，有一些先决条件首先应该得到满足</p><ul><li>确保具备正确版本的编译器、模块工具和其他必要的工具（Documentation&#x2F;Changes文件）。注意：使用太新的工具也偶尔会导致问题。</li><li>准备内核树，配置并构造内核。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">obj-m := hello.o<br></code></pre></td></tr></table></figure><p>上面的赋值语句（它利用了GNU make的扩展语法）说明了有一个模块需要从目标文件hello.o中构造，而从该目标文件中构造的模块名称为hello.ko。</p><p>如果要构造的模块名称为module.ko，并由两个源文件生成（file1.c和file2.c），那么makefile可编写如下</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile">obj-m := module.o<br>module-objs := file1.o file2.o<br></code></pre></td></tr></table></figure><p>为了让上面这种类型的makefile文件正常工作，<strong>必须在大的内核构造系统环境中调用它们</strong>。如果内核源代码树保存在~&#x2F;kernel-2.6目录，则用来构造模块的make命令（在包含模块代码和makefile的目录中输入）</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile">make -C ~/kernel-2.6 M=`pwd` modules<br></code></pre></td></tr></table></figure><p>上述命令<strong>首先改变目录到内核源代码目录</strong>，该目录保存由内核的顶层makefile文件。<strong>M&#x3D;选项</strong>让该makefile在构造modules目标之前返回到模块源代码目录。然后，<strong>modules目标指向obj-m变量中设定的模块</strong>。</p><p>另一种makefile方法，可以使得<strong>内核树之外的模块构造</strong>更加容易。</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-comment"># If KERNELRELEASE is defined, we&#x27;ve been invoked from the</span><br><span class="hljs-comment"># kernel build system and can use its language.</span><br><span class="hljs-keyword">ifneq</span> (<span class="hljs-variable">$(KERNELRELEASE)</span>,)<br>    hello_world-objs := main.o<br>    obj-m := hello_world.o<br><br><span class="hljs-comment"># Otherwise we were called directly from the command</span><br><span class="hljs-comment"># line; invoke the kernel build system.</span><br><span class="hljs-keyword">else</span><br>    KERNELDIR ?= /lib/modules/<span class="hljs-variable">$(<span class="hljs-built_in">shell</span> uname -r)</span>/build<br>    PWD := <span class="hljs-variable">$(<span class="hljs-built_in">shell</span> pwd)</span><br><br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: modules</span><br><span class="hljs-section">modules:</span><br><span class="hljs-variable">$(MAKE)</span> -C <span class="hljs-variable">$(KERNELDIR)</span> M=<span class="hljs-variable">$(PWD)</span> modules<br><span class="hljs-keyword">endif</span><br><br><span class="hljs-meta"><span class="hljs-keyword">.PHONY</span>: clean</span><br><span class="hljs-section">clean:</span><br><span class="hljs-variable">$(MAKE)</span> -C <span class="hljs-variable">$(KERNELDIR)</span> M=<span class="hljs-variable">$(PWD)</span> clean<br><br></code></pre></td></tr></table></figure><p>在一个典型的构造过程中，该makefile将被读取两次。当makefile从命令行运调用时，KERNELRELEASE变量并未设置，这个makefile通过已安装的模块目录中指向内核构造树的符号链接，定位内核的源代码目录。如果实际运行的内核并不是要构造的内核，则可以在命令行提供KENELDIR&#x3D;选项或者设置KERNELDIR环境变量，也可以修改makfile中用来设置KERNELDIR的行。找到内核源代码树之后，这个makefile会调用modules目标，通过之前描述的方法第二次运行make命令，以便运行内核构建系统。</p><h3 id="装载和卸载模块"><a href="#装载和卸载模块" class="headerlink" title="装载和卸载模块"></a>装载和卸载模块</h3><p><strong>insmod</strong>将模块装入内核。它将模块的代码和数据装入内核，然后使用内核的符号表解析模块中任何为解析的符号。与链接器不同，内核不会修改模块的磁盘文件，仅仅修改内存中的副本。insmod可以接受一些命令行选项，可以在模块链接到内核之前给模块中的整型和字符串变量赋值。一个设计良好的模块，可以在装载时进行配置。</p><p>函数<strong>sys_init_module</strong>给模块分配内核内存。有且只有系统调用的名字前带有sys_前缀。</p><p><strong>modprobe</strong>也用来将模块装载到内核中。它与insmod的区别在于，会考虑要装载的模块是否引用了一些当前内核不存在的符号。如果存在这类引用，它会在当前模块搜索路径中查找定义了这些符号的其他模块。如果它找到了这些模块，则会同时将它们装载到内核。</p><p><strong>rmmod</strong>可以从内核中移除模块。如果内核认为模块仍在使用状态或者内核被配置为禁止移除模块，则无法移除该模块。</p><p><strong>lsmod</strong>列出当前装载到内核中的所有模块，它通过读取&#x2F;proc&#x2F;modules文件获得这些信息。有关当前已装载模块的信息也可以在&#x2F;sys&#x2F;module下找到。</p><h3 id="版本依赖"><a href="#版本依赖" class="headerlink" title="版本依赖"></a>版本依赖</h3><p>在缺少modversion的情况下，我们的<strong>模块代码必须针对要链接的每个版本的内核重新编译</strong>。<strong>模块和特定的内核版本定义的数据结构和函数原型紧密关联</strong>。</p><p>内核不会假定一个给定的模块是针对正确的内核版本构造的。在构造过程中，<strong>可以将自己的模块和vermagic.o链接</strong>。该目标文件包含了大量有关内核的信息，在试图装载模块时，这些信息可以用来检查模块和正在运行的内核的兼容性。</p><p>如果打算编写一个<strong>能够和多个内核版本一起工作的模块</strong>，则必须<strong>使用宏以及#ifdef</strong>来构造并编译自己的代码。</p><ul><li>UTS_RELEASE，该宏扩展为一个描述内核版本的字符串</li><li>LINUX_VERSION_CODE，该宏扩展为为内核版本的二进制表示，版本发行号中的每一部分对应一个字节</li><li>KERNEL_VERSION(major,minor,release)，该宏以组成版本号的三个部分，创建整数的版本号</li></ul><p><strong>不应随意使用#ifdef条件语句</strong>将驱动程序代码弄得杂乱无章。最好的一个解决方法就是<strong>将所有相关的预处理条件语句集中存放在一个特定的头文件中</strong>。一般而言，<strong>依赖于特定版本的代码应该隐藏在低层宏或函数之中</strong>。</p><h3 id="平台依赖"><a href="#平台依赖" class="headerlink" title="平台依赖"></a>平台依赖</h3><p>如果模块和某个给定内核工作，它也<strong>必须和内核一样了解目标处理器</strong>。通过<strong>链接vermagic.o</strong>，在装载模块时，内核会检查处理器相关的配置选项以便确保模块匹配于运行中的内核。</p><h3 id="内核符号表"><a href="#内核符号表" class="headerlink" title="内核符号表"></a>内核符号表</h3><p>insmod使用<strong>公共内核符号表</strong>来解析模块中未定义的符号。<strong>公共内核符号表</strong>包含了<strong>所有的全局内核项（函数和变量）的地址</strong>，它是实现模块化驱动程序所必须的。</p><p>当模块被装入内核后，它所<strong>导出的任何符号</strong>都会变成内核符号表的一部分。通常情况下，模块只需实现自己的功能，而无需导出任何符号。如果其他模块要从某个模块获得好处，则需要导出符号。这样就可以在其他模块上<strong>层叠新的模块</strong>，即<strong>模块层叠技术</strong>。</p><p>如果一个模块要向其他模块导出符号，则应该使用下面的宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">EXPORT_SYMBOL(name);<br>EXPORT_SYMBOL_GPL(name);<br></code></pre></td></tr></table></figure><p>GPL版本使得要导出的模块只能被GPL许可证下的模块使用。<strong>符号必须在模块文件的全局部分导出</strong>，不能在函数中导出。</p><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><p>内核是一个特定的环境，对需要和它接口的代码有其自己的一些要求。</p><p>所有的模块代码中都包含下面两行代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/module.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/init.h&gt;</span></span><br></code></pre></td></tr></table></figure><p><strong>module.h</strong>包含可装载模块需要的大量符号和函数的定义。<strong>init.h</strong>是为了指定初始化和清除函数。</p><p>大部分模块还包含<strong>moduleparam.h</strong>头文件，这样就可以<strong>在装载模块时向模块传递参数</strong>。</p><p>尽管不是严格要求，模块应该指定所使用的许可证，例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">MODULE_LICENSE(<span class="hljs-string">&quot;GPL&quot;</span>)<br></code></pre></td></tr></table></figure><p>内核可以识别</p><ul><li>GPL</li><li>GPL v2</li><li>GPL and additional rights</li><li>Dual BSD&#x2F;GPL</li><li>Dual MPL&#x2F;GPL</li><li>Proprietary</li></ul><p>如果模块没有显式地标记为上述可识别的许可证，就会被假定是专有的，内核装在这种模块就会被“污染”。</p><p>还可包含其他描述性定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">MODULE_AUTHOR<br>MODULE_DESCRIPTION<br>MODULE_VERSION<br>MODULE_ALIAS<br>MODULE_DEVICE_TABLE<br></code></pre></td></tr></table></figure><p>这些MODULE_声明，一般<strong>放在文件的最后</strong>。</p><h3 id="初始化和关闭"><a href="#初始化和关闭" class="headerlink" title="初始化和关闭"></a>初始化和关闭</h3><p>模块的<strong>初始化函数</strong>负责<strong>注册</strong>模块所提供的任何<strong>设施</strong>。这里的<strong>设施</strong>指的是一个可以被应用程序访问的新功能，例如一个完整的驱动程序或一个新的软件抽象。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">initialization_function</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">/*Initialization codes*/</span><br>&#125;<br><br>module_init(initialization_function);<br></code></pre></td></tr></table></figure><p>初始化函数被声明为static，它在特定文件之外没有其他意义。但这并不是一个强制性规则，因为一个模块函数如果要对内核其他部分可见，则必须被显式导出。</p><p>__init标记表明该函数仅在初始化期间使用。载模块被装载后，模块装载器会将初始化函数丢弃，以释放其占用的内存。__init和 __initdata很值得使用，但请注意，不要在结束初始化之后仍要使用的函数或数据上使用它们。</p><p>module_init的使用是强制的。这个宏会在模块的目标代码中增加一个特殊的段，用于说明内核初始化函数所在的位置。</p><p>模块可以注册许多不同类型的设施。对每种设施，对应有具体的内核函数用来完成注册。传递到内核注册函数的参数通常是指向用来描述新设施及设施名称的数据结构指针，而数据结构通常包含指向模块函数的指针。这样，模块中的函数就会在恰当的时间被内核调用。</p><h4 id="清除函数"><a href="#清除函数" class="headerlink" title="清除函数"></a>清除函数</h4><p>每个重要的模块都需要一个清除函数，它在模块被移除前注销接口并向系统返回所有资源。该函数定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit <span class="hljs-title function_">cleanup_function</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">/*Cleanup codes*/</span><br>&#125;<br>module_exit(cleanup_function);<br></code></pre></td></tr></table></figure><p>清除函数没有返回值。<br>__exit修饰词标记改代码仅用于模块卸载，编译器将把该函数放在特殊的ELF段中。被标记为__exit的函数只能在模块被卸载或者系统关闭时调用。</p><p>module_exit声明帮助内核找到模块的清除函数。</p><p>如果一个模块未定义清除函数，则内核不允许卸载该模块。</p><h4 id="初始化过程中的错误处理"><a href="#初始化过程中的错误处理" class="headerlink" title="初始化过程中的错误处理"></a>初始化过程中的错误处理</h4><p>在内核中注册设施时，<strong>时刻铭记注册可能会失败</strong>。模块代码必须始终检查返回值，确保所有的操作已真正成功。</p><p>如果在注册设施时遇到任何错误，首先要判断模块是否可以继续初始化。通常在某个注册失败后可以通过降低功能来继续运转。</p><p>如果在发生了某个特定类型的错误之后无法继续装载模块，则要将出错之前的任何注册工作撤销掉。</p><p>错误恢复的<strong>处理有时使用goto语句</strong>比较有效，可以避免大量复杂的、高度缩进的“结构化”逻辑。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __init <span class="hljs-title function_">my_init_func</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">int</span> err;<br><span class="hljs-comment">/*Register using pointers and names */</span><br>err = register_this(ptr1,<span class="hljs-string">&quot;skull&quot;</span>);<br><span class="hljs-keyword">if</span>(err)<br><span class="hljs-keyword">goto</span> fail_this;<br>err = register_that(ptr2,<span class="hljs-string">&quot;skull&quot;</span>);<br><span class="hljs-keyword">if</span>(err)<br><span class="hljs-keyword">goto</span> fail_that;<br>err = register_those(ptr3,<span class="hljs-string">&quot;skull&quot;</span>);<br><span class="hljs-keyword">if</span>(err)<br><span class="hljs-keyword">goto</span> fail_those;<br><span class="hljs-comment">/*Success*/</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>fail_those:<br>unregister_that(ptr2,<span class="hljs-string">&quot;skull&quot;</span>);<br>fail_that:<br>unregister_this(ptr1,<span class="hljs-string">&quot;skull&quot;</span>);<br>fail_this:<br><span class="hljs-keyword">return</span> err;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上的代码再出错的时候使用goto语句，它将只撤销出错时刻以前所成功注册的那些设施。<br>my_init_module的返回值err是一个错误编码，它是定义在&lt;linux&#x2F;error.h&gt;中的负整数。每次返回合适的错误编码是一个好习惯。</p><p>模块的清除函数需要撤销初始化函数所注册的所有设施，习惯上，以相反于注册的顺序撤销设施。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __exit <span class="hljs-title function_">my_cleanup_function</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>unregister_those(ptr3,<span class="hljs-string">&quot;skull&quot;</span>);<br>unregister_that(ptr2,<span class="hljs-string">&quot;skull&quot;</span>);<br>unregister_this(ptr1,<span class="hljs-string">&quot;skull&quot;</span>);<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>每当发生错误时从初始化函数中调用清除函数</strong>，将减少代码的重复并使代码更清晰、更有条理。当然，清除函数<strong>必须在撤销每项设施的注册之前检查它的状态</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">something</span> *<span class="hljs-title">item1</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">somethingelse</span> *<span class="hljs-title">item2</span>;</span><br><span class="hljs-type">int</span> stuff_ok;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">my_cleanup</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-keyword">if</span>(item1)<br>release_thing(item1);<br><span class="hljs-keyword">if</span>(item2)<br>release_thing2(item2);<br><span class="hljs-keyword">if</span>(stuff_ok)<br>unregister_stuff();<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">int</span> __init <span class="hljs-title function_">my_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-type">int</span> err = -ENOMEM;<br>item1 = allocate_thing(arguments);<br>item2 = allocate_thing2(arguments2);<br><span class="hljs-keyword">if</span>(!item1 || !item2)<br><span class="hljs-keyword">goto</span> fail;<br>err = register_stuff(item1,item2);<br><span class="hljs-keyword">if</span>(!err)<br>stuff_ok = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span><br>stuff_ok = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>fail:<br>my_cleanup();<br><span class="hljs-keyword">return</span> err;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码中的初始化方式可以扩展到对大量设施的支持。需要注意的是，因为清除函数被非退出代码调用，因此<strong>不能将清除函数标记为__exit</strong>。</p><h4 id="模块装载竞争"><a href="#模块装载竞争" class="headerlink" title="模块装载竞争"></a>模块装载竞争</h4><p>首先要始终铭记的是，<strong>在注册完成后，内核的某些部分可能会立即使用我们刚刚注册的任何设施</strong>。也就是说，<strong>初始化函数还在运行的时候，内核就完全可能调用我们的模块</strong>。</p><p>所以，<strong>在首次注册完成后，代码就应该准备好被内核的其他部分调用，在用来支持某个设施的所有内部初始化完成之前，不要注册任何设施。</strong></p><h3 id="模块参数"><a href="#模块参数" class="headerlink" title="模块参数"></a>模块参数</h3><p>由于系统的不同，<strong>驱动程序需要的参数也会发生变化</strong>，例如设备编号和一些用来控制驱动程序操作方式的参数。为满足这种需求，<strong>内核允许对驱动程序指定参数</strong>，而这些参数<strong>可在装载驱动程序模块时改变。</strong></p><p>这些<strong>参数的值可在运行insmod或modprobe命令时赋值</strong>，而<strong>modprobe还可以从其配置文件（&#x2F;etc&#x2F;modprobe.conf）中读取参数值</strong>。这两个命令可以接受几种参数类型的赋值</p><ul><li>bool</li><li>invbool：bool和invbool关联的变量应该是int类型</li><li>charp：字符指针值。</li><li>int</li><li>long</li><li>short</li><li>uint</li><li>ulong</li><li>ushort</li></ul><p>在insmod改变模块参数之前，<strong>模块必须让这些参数对insmod命令可见</strong>。参数必须<strong>通过module_param宏来声明</strong>，它有三个参数</p><ul><li>变量的名称</li><li>类型</li><li>用于sysfs入口项的访问许可掩码</li></ul><p>这个宏<strong>必须放在任何函数之外</strong>，通常是在源文件的头部。</p><p>模块的装载器<strong>也支持数组参数</strong>，在<strong>提供数组值时用逗号划分各数组成员</strong>。要声明数组参数，使用<strong>宏module_param_array(name,type,num,perm)<strong>。模块装载器会</strong>拒绝接受超过数组大小的值</strong>。</p><p>如果我们<strong>需要的类型不在上面列出的清单中</strong>，可以使用<strong>模块代码中的钩子</strong>来定义这些类型。</p><p><strong>所有模块参数都应给定一个默认值</strong>，insmod只会在用户明确设置了参数的值的情况下参会改变参数的值。</p><p><strong>module_param的最后一个参数</strong>是访问许可值，它用来<strong>控制谁能访问sysfs中对模块参数的表述</strong></p><ul><li>如果perm被设置为0，就不会有对应的sysfs入口项</li><li>否则模块参数会在sys&#x2F;module中出现，并设置为给定的访问许可</li></ul><p>如果一个参数通过sysfs被修改，内核不会以任何方式通知模块。大多数情况下，不应该让模块参数可写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/init.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;linux/kernel.h&gt;</span></span><br><br><span class="hljs-type">static</span> <span class="hljs-type">char</span> *whom = <span class="hljs-string">&quot;Mom&quot;</span>;<br><span class="hljs-type">static</span> <span class="hljs-type">int</span> howmany = <span class="hljs-number">1</span>;<br><br>module_param(howmany, <span class="hljs-type">int</span>,   S_IRUGO);<br>module_param(whom,    charp, S_IRUGO);<br><br><span class="hljs-type">static</span><br><span class="hljs-type">int</span> __init <span class="hljs-title function_">m_init</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>printk(KERN_WARNING <span class="hljs-string">&quot;parameters test module is loaded\n&quot;</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; howmany; ++i) &#123;<br>printk(KERN_WARNING <span class="hljs-string">&quot;#%d Hello, %s\n&quot;</span>, i, whom);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">static</span><br><span class="hljs-type">void</span> __exit <span class="hljs-title function_">m_exit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>printk(KERN_WARNING <span class="hljs-string">&quot;parameters test module is unloaded\n&quot;</span>);<br>&#125;<br><br>module_init(m_init);<br>module_exit(m_exit);<br><br>MODULE_LICENSE(<span class="hljs-string">&quot;GPL&quot;</span>);<br>MODULE_AUTHOR(<span class="hljs-string">&quot;Bryan&quot;</span>);<br>MODULE_DESCRIPTION(<span class="hljs-string">&quot;Module parameters test program&quot;</span>);<br><br></code></pre></td></tr></table></figure><p>直接使用insmod，装载模块</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs elixir">bryan<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/Desktop/Linux-Device-Driver-master/</span><span class="hljs-number">02_</span>module_parameters<span class="hljs-variable">$ </span>sudo insmod module_parameters.ko <br>bryan<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/Desktop/Linux-Device-Driver-master/</span><span class="hljs-number">02_</span>module_parameters<span class="hljs-variable">$ </span>dmesg | tail <span class="hljs-number">-10</span><br>[  <span class="hljs-number">282.742416</span>] <span class="hljs-symbol">raid6:</span> .... xor() <span class="hljs-number">21210</span> <span class="hljs-title class_">MB</span>/s, rmw enabled<br>[  <span class="hljs-number">282.742417</span>] <span class="hljs-symbol">raid6:</span> using avx2x2 recovery algorithm<br>[  <span class="hljs-number">282.783190</span>] <span class="hljs-symbol">xor:</span> automatically using best checksumming function   avx       <br>[  <span class="hljs-number">282.877516</span>] <span class="hljs-title class_">Btrfs</span> loaded, crc32c=crc32c-intel<br>[  <span class="hljs-number">367.429218</span>] parameters test module is unloaded<br>[  <span class="hljs-number">378.711958</span>] parameters test module is loaded<br>[  <span class="hljs-number">378.711959</span>] <span class="hljs-comment">#0 Hello, Mom</span><br>[  <span class="hljs-number">470.278217</span>] parameters test module is unloaded<br>bryan<span class="hljs-variable">@ubuntu</span><span class="hljs-symbol">:~/Desktop/Linux-Device-Driver-master/</span><span class="hljs-number">02_</span>module_parameters<span class="hljs-variable">$ </span><br></code></pre></td></tr></table></figure><p>使用insmod装载模块时，携带参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">bryan@ubuntu:~/Desktop/Linux-Device-Driver-master/<span class="hljs-number">02</span>_module_parameters$ sudo insmod module_parameters.ko  whom=dady howmany=<span class="hljs-number">3</span><br>bryan@ubuntu:~/Desktop/Linux-Device-Driver-master/<span class="hljs-number">02</span>_module_parameters$ sudo rmmod module_parameters <br>bryan@ubuntu:~/Desktop/Linux-Device-Driver-master/<span class="hljs-number">02</span>_module_parameters$ dmesg | tail <span class="hljs-number">-10</span><br>[  <span class="hljs-number">378.711959</span>] #<span class="hljs-number">0</span> Hello, Mom<br>[  <span class="hljs-number">470.278217</span>] parameters test module is unloaded<br>[  <span class="hljs-number">473.729918</span>] parameters test module is loaded<br>[  <span class="hljs-number">473.729919</span>] #<span class="hljs-number">0</span> Hello, Mom<br>[  <span class="hljs-number">556.020495</span>] parameters test module is unloaded<br>[  <span class="hljs-number">578.373167</span>] parameters test module is loaded<br>[  <span class="hljs-number">578.373168</span>] #<span class="hljs-number">0</span> Hello, dady<br>[  <span class="hljs-number">578.373168</span>] #<span class="hljs-number">1</span> Hello, dady<br>[  <span class="hljs-number">578.373169</span>] #<span class="hljs-number">2</span> Hello, dady<br>[  <span class="hljs-number">582.573809</span>] parameters test module is unloaded<br>bryan@ubuntu:~/Desktop/Linux-Device-Driver-master/<span class="hljs-number">02</span>_module_parameters$ <br></code></pre></td></tr></table></figure><p>在insmod装载模块之前，在&#x2F;sys&#x2F;module目录下无法找到module_parameters目录</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">bryan@ubuntu:~/Desktop/Linux-Device-Driver-master/<span class="hljs-number">02</span>_module_parameters$ ls /sys/module/module_parameters<br>ls: cannot access <span class="hljs-string">&#x27;/sys/module/module_parameters&#x27;</span>: No such file or directory<br>bryan@ubuntu:~/Desktop/Linux-Device-Driver-master/<span class="hljs-number">02</span>_module_parameters$ <br></code></pre></td></tr></table></figure><p>insmod装在模块后，可以在&#x2F;sys&#x2F;module目录下找到module_parameters目录，并在&#x2F;sys&#x2F;module&#x2F;module_parameters&#x2F;parameters目录下看到两个参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c">bryan@ubuntu:~/Desktop/Linux-Device-Driver-master/<span class="hljs-number">02</span>_module_parameters$ sudo insmod module_parameters.ko  whom=dady howmany=<span class="hljs-number">3</span><br>bryan@ubuntu:~/Desktop/Linux-Device-Driver-master/<span class="hljs-number">02</span>_module_parameters$ ls /sys/module/module_parameters<br>coresize  initsize   notes       refcnt    srcversion  uevent<br>holders   initstate  parameters  sections  taint<br>bryan@ubuntu:~/Desktop/Linux-Device-Driver-master/<span class="hljs-number">02</span>_module_parameters$ ls /sys/module/module_parameters/parameters/<br>howmany  whom<br>bryan@ubuntu:~/Desktop/Linux-Device-Driver-master/<span class="hljs-number">02</span>_module_parameters$ ls /sys/module/module_parameters/parameters/howmany <br>/sys/module/module_parameters/parameters/howmany<br>bryan@ubuntu:~/Desktop/Linux-Device-Driver-master/<span class="hljs-number">02</span>_module_parameters$ cat /sys/module/module_parameters/parameters/howmany <br><span class="hljs-number">3</span><br>bryan@ubuntu:~/Desktop/Linux-Device-Driver-master/<span class="hljs-number">02</span>_module_parameters$ cat /sys/module/module_parameters/parameters/whom <br>dady<br>bryan@ubuntu:~/Desktop/Linux-Device-Driver-master/<span class="hljs-number">02</span>_module_parameters$ <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Linux Kernel Driver</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>I2C驱动框架学习</title>
    <link href="/2023/09/28/I2C%E9%A9%B1%E5%8A%A8%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/09/28/I2C%E9%A9%B1%E5%8A%A8%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="I2C通信："><a href="#I2C通信：" class="headerlink" title="I2C通信："></a>I2C通信：</h1><p><strong>I2C集成电路总线是一种串行的通信总线，使用主从架构</strong><br>特点：<br>只需要两条双向总线（SDA串行数据线、SCL串行时钟线）<br>所有组件之间都存在简单的主从关系，连接到总线的每个设备都可以通过唯一地址进行软件寻址。<br>I2C是真正的多主设备总线，可以提供仲裁和冲突检测。</p><h3 id="CAN总线仲裁："><a href="#CAN总线仲裁：" class="headerlink" title="CAN总线仲裁："></a>CAN总线仲裁：</h3><p>CAN总线采用的是一种叫做“载波监测，多主掌控／冲突避免”（CSMA／CA）的通信模式。这种总线仲裁方式允许总线上的任何一个设各都有机会取得总线的控制权并向外发送数据。如果在同一时刻有2个或2个以上的设各要求发送数据，就会产生总线冲突，CAN总线能够实时地检测这些冲突并对其进行仲裁，从而使具有高优先级的数据不受任何损坏地传输。<br>当总线处于空闲状态时呈隐性电平，此时任何节点都可以向总线发送显性电平作为帧的开始。如果2个或2个以上同时发送就会产生竞争。CAN总线解决竞争的方法同以太网的CSMA／CD方法基本相似。此外，CAN总线做了改进并采用CSMA／CA访问总线，按位对标识符进行仲裁。各节点在向总线发送电平的同时，也对总线上的电平读取，并与自身发送的电平进行比较，如果电平相同继续发送下一位，不同则停止发送退出总线竞争。剩余的节点继续上述过程，直到总线上只剩下1个节点发送的电平，总线竞争结束，优先级高的节点获得总线的控制权。<br>CAN总线以报文为单位进行数据传输，具有最小二进制数的标识符的节点具有最高的优先级。这种优先级一旦在系统设计时确定就不能随意地更改，总线读取产生的冲突主要靠这些位仲裁解决。<br><img src="/imgs/I2C%E9%A9%B1%E5%8A%A8%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/CAN%E6%80%BB%E7%BA%BF%E8%8A%82%E7%82%B9%E8%AE%BF%E9%97%AE%E8%BF%87%E7%A8%8B.gif"><br>如图所示，节点A和节点B的标识符的第lO、9、8位电平相同，因此两个节点侦听到的信息和它们发出的信息相同。第7位节点B发出一个“1”，但从节点上接收到的消息却是“0”，说明有更高优先级的节点占用总线发送消息。节点B会退出发送处于单纯监听方式而不发送数据；节点A成功发送仲裁位从而获得总线的控制权，继而发送全部消息。总线中的信号持续跟踪最后获得总线控制权发出的报文，本例中节点A的报文将被跟踪。这种非破坏性位仲裁方法的优点在于，在网络最终确定哪个节点被传送前，报文的起始部分已经在网络中传输了，因此具有高优先级的节点的数据传输没有任何延时。在获得总线控制权的节点发送数据过程中，其他节点成为报文的接收节点，并且不会在总线再次空闲之前发送报文。</p><h3 id="数据传输协议："><a href="#数据传输协议：" class="headerlink" title="数据传输协议："></a>数据传输协议：</h3><p>主设备和从设备进行数据传输时，数据通过一条SDA数据线在主从设备之间传输0和1的串行数据。串行数据的结构分为：开始条件，地址位，读写位，应答位，数据位，停止条件。</p><h4 id="开始条件："><a href="#开始条件：" class="headerlink" title="开始条件："></a>开始条件：</h4><p>主设备要开始通信时发送开始信号，执行：<br>将SDA线从高压电平转换到低压电平<br>将SCL从高电平切换成低压电平</p><p><strong>地址位</strong>：</p><p>主机向从机发送&#x2F;接收数据，需要发送对应的从机地址，然后匹配总线上挂载的从机地址。</p><p><strong>读写位</strong>：</p><p>指定数据传输方向：主–&gt;从，该位为0。从–&gt;主，该位为1。</p><p><strong>ACK</strong>&#x2F;<strong>NACK</strong>：</p><p>主机每次发送完数据之后会等待从设备的应答信号ACK。<br>如果从设备发送应答信号ACK，则SDA会被拉低；<br>若没有应答信号NACK，则SDA会输出为高电平，这过程会引起主设备发生重启或者停止；</p><p><strong>数据块</strong>：传输数据总共有8位，由发送方设置。将数据位传输到接收方，发送后会紧跟一个ACK&#x2F;NACK位，如果接收器成功收到数据，则置为0，否则保持逻辑1。重复发送直到数据传送完。</p><p><strong>停止条件</strong>：先将SDA线从低电压电平切换到高电压电平；<br>再将SCL线从高电平拉到低电平。</p><h3 id="架构层次分类"><a href="#架构层次分类" class="headerlink" title="架构层次分类"></a>架构层次分类</h3><p><img src="/imgs/I2C%E9%A9%B1%E5%8A%A8%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/I2C%E9%A9%B1%E5%8A%A8%E6%A1%86%E6%9E%B6.png"></p><h5 id="第一层："><a href="#第一层：" class="headerlink" title="第一层："></a>第一层：</h5><p>提供i2c adapter的硬件驱动，探测、初始化i2c adapter（如申请i2c的io地址和中断号），驱动soc控制的i2c adapter在硬件上产生信号（start、stop、ack）以及处理i2c中断。覆盖图中的硬件实现层</p><h5 id="第二层："><a href="#第二层：" class="headerlink" title="第二层："></a>第二层：</h5><p>提供i2c adapter的algorithm，用具体适配器的xxx_xferf()函数来填充i2c_algorithm的master_xfer函数指针，并把赋值后的i2c_algorithm再赋值给i2c_adapter的algo指针。覆盖图中的访问抽象层、i2c核心层</p><h6 id="第三层："><a href="#第三层：" class="headerlink" title="第三层："></a>第三层：</h6><p>实现i2c设备驱动中的i2c_driver接口，用具体的i2c device设备的attach_adapter()、detach_adapter()方法赋值给i2c_driver的成员函数指针。实现设备device与总线（或者叫adapter）的挂接。覆盖图中的driver驱动层</p><h5 id="第四层："><a href="#第四层：" class="headerlink" title="第四层："></a>第四层：</h5><p>实现i2c设备所对应的具体device的驱动，i2c_driver只是实现设备与总线的挂接，而挂接在总线上的设备则是千差万别的，eeprom和ov2715显然不是同一类的device，所以要实现具体设备device的write()、read()、ioctl()等方法，赋值给file_operations，然后注册字符设备（多数是字符设备）。覆盖图中的driver驱动层</p><p>第一层和第二层又叫i2c总线驱动(bus)，第三第四属于i2c设备驱动(device driver)。在linux驱动架构中，几乎不需要驱动开发人员再添加bus，因为linux内核几乎集成所有总线bus，如usb、pci、i2c等等。并且总线bus中的【与特定硬件相关的代码】已由芯片提供商编写完成，例如TI davinci平台i2c总线bus与硬件相关的代码在内核目录&#x2F;drivers&#x2F;i2c&#x2F;buses下的i2c-davinci.c源文件中；而三星的s3c-2440平台i2c总线bus为&#x2F;drivers&#x2F;i2c&#x2F;buses&#x2F;i2c-s3c2410.c</p><p>第三第四层又叫设备驱动层与特定device相干的就需要驱动工程师来实现了。</p><h4 id="具体分析"><a href="#具体分析" class="headerlink" title="具体分析"></a>具体分析</h4><p>i2c_adapter与i2c_client的关系与i2c硬件体系中设配器与设备的关系一致，即i2c_client依附于i2c_adapter，由于一个适配器上可以连接多个i2c设备device，所以相应的，i2c_adapter也可以被多个i2c_client依附，在i2c_adapter中包含i2c_client的链表。同一类的i2c设备device对应一个驱动driver。driver与device的关系是一对多的关系。</p><p>看一下这几个重要的结构体，分别是i2c_driver i2c_client i2c_adapter，也可以先忽略他们，待会回过头来看会更容易理解</p><h5 id="i2c-driver"><a href="#i2c-driver" class="headerlink" title="i2c_driver"></a>i2c_driver</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">i2c_driver</span> &#123;</span><br><span class="hljs-type">int</span> id;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-class"><span class="hljs-keyword">class</span>;</span><br> <br><span class="hljs-type">int</span> (*attach_adapter)(<span class="hljs-keyword">struct</span> i2c_adapter *);<br><span class="hljs-type">int</span> (*detach_adapter)(<span class="hljs-keyword">struct</span> i2c_adapter *);<br> <br><span class="hljs-type">int</span> (*detach_client)(<span class="hljs-keyword">struct</span> i2c_client *);<br> <br><span class="hljs-type">int</span> (*command)(<span class="hljs-keyword">struct</span> i2c_client *client,<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cmd, <span class="hljs-type">void</span> *arg);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device_driver</span> <span class="hljs-title">driver</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">list</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>};</p><h5 id="i2c-client"><a href="#i2c-client" class="headerlink" title="i2c_client"></a>i2c_client</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">i2c_client</span> &#123;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> flags;<span class="hljs-comment">/* div., see below*/</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">short</span> addr;<span class="hljs-comment">/* chip address - <span class="hljs-doctag">NOTE:</span> 7bit */</span><br><span class="hljs-comment">/* addresses are stored in the*/</span><br><span class="hljs-comment">/* _LOWER_ 7 bits*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">i2c_adapter</span> *<span class="hljs-title">adapter</span>;</span><span class="hljs-comment">/* the adapter we sit on*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">i2c_driver</span> *<span class="hljs-title">driver</span>;</span><span class="hljs-comment">/* and our access routines*/</span><br><span class="hljs-type">int</span> usage_count;<span class="hljs-comment">/* How many accesses currently  */</span><br><span class="hljs-comment">/* to the client*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device</span> <span class="hljs-title">dev</span>;</span><span class="hljs-comment">/* the device structure*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">list</span>;</span><br><span class="hljs-type">char</span> name[I2C_NAME_SIZE];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">completion</span> <span class="hljs-title">released</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="i2c-adapter"><a href="#i2c-adapter" class="headerlink" title="i2c_adapter"></a>i2c_adapter</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">i2c_adapter</span> &#123;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">module</span> *<span class="hljs-title">owner</span>;</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> id;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-class"><span class="hljs-keyword">class</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">i2c_algorithm</span> *<span class="hljs-title">algo</span>;</span><span class="hljs-comment">/* the algorithm to access the bus*/</span><br><span class="hljs-type">void</span> *algo_data;<br> <br><span class="hljs-comment">/* --- administration stuff. */</span><br><span class="hljs-type">int</span> (*client_register)(<span class="hljs-keyword">struct</span> i2c_client *);<br><span class="hljs-type">int</span> (*client_unregister)(<span class="hljs-keyword">struct</span> i2c_client *);<br> <br><span class="hljs-comment">/* data fields that are valid for all devices*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mutex</span> <span class="hljs-title">bus_lock</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">mutex</span> <span class="hljs-title">clist_lock</span>;</span><br> <br><span class="hljs-type">int</span> timeout;<br><span class="hljs-type">int</span> retries;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">device</span> <span class="hljs-title">dev</span>;</span><span class="hljs-comment">/* the adapter device */</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">class_device</span> <span class="hljs-title">class_dev</span>;</span><span class="hljs-comment">/* the class device */</span><br> <br><span class="hljs-type">int</span> nr;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">clients</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_head</span> <span class="hljs-title">list</span>;</span><br><span class="hljs-type">char</span> name[I2C_NAME_SIZE];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">completion</span> <span class="hljs-title">dev_released</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">completion</span> <span class="hljs-title">class_dev_released</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="i2c-algorithm"><a href="#i2c-algorithm" class="headerlink" title="i2c_algorithm"></a>i2c_algorithm</h5><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">i2c_algorithm</span> &#123;</span><br><span class="hljs-type">int</span> (*master_xfer)(<span class="hljs-keyword">struct</span> i2c_adapter *adap,<span class="hljs-keyword">struct</span> i2c_msg *msgs, <br>                   <span class="hljs-type">int</span> num);<br><span class="hljs-type">int</span> (*slave_send)(<span class="hljs-keyword">struct</span> i2c_adapter *,<span class="hljs-type">char</span>*,<span class="hljs-type">int</span>);<br><span class="hljs-type">int</span> (*slave_recv)(<span class="hljs-keyword">struct</span> i2c_adapter *,<span class="hljs-type">char</span>*,<span class="hljs-type">int</span>);<br>u32 (*functionality) (<span class="hljs-keyword">struct</span> i2c_adapter *);<br>&#125;;<br></code></pre></td></tr></table></figure><h5 id="【i2c-adapter与i2c-algorithm】"><a href="#【i2c-adapter与i2c-algorithm】" class="headerlink" title="【i2c_adapter与i2c_algorithm】"></a>【i2c_adapter与i2c_algorithm】</h5><p>i2c_adapter对应与物理上的一个适配器，而i2c_algorithm对应一套通信方法，一个i2c适配器需要i2c_algorithm中提供的（i2c_algorithm中的又是更下层与硬件相关的代码提供）通信函数来控制适配器上产生特定的访问周期。缺少i2c_algorithm的i2c_adapter什么也做不了，因此i2c_adapter中包含其使用i2c_algorithm的指针。</p><p>i2c_algorithm中的关键函数master_xfer()用于产生i2c访问周期需要的start stop ack信号，以i2c_msg（即i2c消息）为单位发送和接收通信数据。i2c_msg也非常关键，调用驱动中的发送接收函数需要填充该结构体</p><pre><code class="hljs"> /*  * I2C Message - used for pure i2c transaction, also from /dev interface  */ struct i2c_msg &#123;     __u16 addr;/* slave address*/  __u16 flags;  __u16 len;/* msg length*/  __u8 *buf;/* pointer to msg data*/ &#125;;</code></pre><h5 id="【i2c-driver和i2c-client】"><a href="#【i2c-driver和i2c-client】" class="headerlink" title="【i2c_driver和i2c_client】"></a>【i2c_driver和i2c_client】</h5><p>i2c_driver对应一套驱动方法，其主要函数是attach_adapter()和detach_client()，i2c_client对应真实的i2c物理设备device，每个i2c设备都需要一个i2c_client来描述，i2c_driver与i2c_client的关系是一对多。一个i2c_driver上可以支持多个同等类型的i2c_client.</p><h5 id="【i2c-adapter和i2c-client】"><a href="#【i2c-adapter和i2c-client】" class="headerlink" title="【i2c_adapter和i2c_client】"></a>【i2c_adapter和i2c_client】</h5><p>i2c_adapter和i2c_client的关系与i2c硬件体系中适配器和设备的关系一致，即i2c_client依附于i2c_adapter,由于一个适配器上可以连接多个i2c设备，所以i2c_adapter中包含依附于它的i2c_client的链表。<br>从图1图2中都可以看出，linux内核对i2c架构抽象了一个叫核心层core的中间件，它分离了设备驱动device driver和硬件控制的实现细节（如操作i2c的寄存器），core层不但为上面的设备驱动提供封装后的内核注册函数，而且还为小面的硬件时间提供注册接口（也就是i2c总线注册接口），可以说core层起到了承上启下的作用。</p><p>我们先看一下i2c-core为外部提供的核心函数（选取部分），i2c-core对应的源文件为i2c-core.c，位于内核目录&#x2F;driver&#x2F;i2c&#x2F;i2c-core.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">EXPORT_SYMBOL(i2c_add_adapter);<br>EXPORT_SYMBOL(i2c_del_adapter);<br>EXPORT_SYMBOL(i2c_del_driver);<br>EXPORT_SYMBOL(i2c_attach_client);<br>EXPORT_SYMBOL(i2c_detach_client);<br><br>EXPORT_SYMBOL(i2c_transfer);<br></code></pre></td></tr></table></figure><p>i2c_transfer()函数，i2c_transfer()函数本身并不具备驱动适配器物理硬件完成消息交互的能力，它只是寻找到i2c_adapter对应的i2c_algorithm，并使用i2c_algorithm的master_xfer()函数真正的驱动硬件流程，代码清单如下，不重要的已删除。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">i2c_transfer</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> i2c_adapter * adap, <span class="hljs-keyword">struct</span> i2c_msg *msgs, <span class="hljs-type">int</span> num)</span><br>&#123;<br><span class="hljs-type">int</span> ret;<br><span class="hljs-keyword">if</span> (adap-&gt;algo-&gt;master_xfer) &#123;<span class="hljs-comment">//如果master_xfer函数存在，则调用，否则返回错误</span><br>ret = adap-&gt;algo-&gt;master_xfer(adap,msgs,num);<span class="hljs-comment">//这个函数在硬件相关的代码中给algorithm赋值</span><br><span class="hljs-keyword">return</span> ret;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> -ENOSYS;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当一个具体的client被侦测到并被关联的时候，设备和sysfs文件将被注册。相反的，在client被取消关联的时候，sysfs文件和设备也被注销，驱动开发人员需开发i2c设备驱动时，需要调用下列函数。程序清单如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">i2c_attach_client</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> i2c_client *client)</span><br>&#123;<br>...<br>device_register(&amp;client-&gt;dev);<br>device_create_file(&amp;client-&gt;dev, &amp;dev_attr_client_name);<br>...<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">i2c_detach_client</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> i2c_client *client)</span><br>&#123;<br>...<br>device_remove_file(&amp;client-&gt;dev, &amp;dev_attr_client_name);<br>device_unregister(&amp;client-&gt;dev);<br>...<br><span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>i2c_add_adapter()函数和i2c_del_adapter()在i2c-davinci.c中有调用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* -----</span><br><span class="hljs-comment"> * i2c_add_adapter is called from within the algorithm layer,</span><br><span class="hljs-comment"> * when a new hw adapter registers. A new device is register to be</span><br><span class="hljs-comment"> * available for clients.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">i2c_add_adapter</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> i2c_adapter *adap)</span><br>&#123;<br>...<br>device_register(&amp;adap-&gt;dev);<br>device_create_file(&amp;adap-&gt;dev, &amp;dev_attr_name);<br>...<br><span class="hljs-comment">/* inform drivers of new adapters */</span><br>list_for_each(item,&amp;drivers) &#123;<br>driver = list_entry(item, <span class="hljs-keyword">struct</span> i2c_driver, <span class="hljs-built_in">list</span>);<br><span class="hljs-keyword">if</span> (driver-&gt;attach_adapter)<br><span class="hljs-comment">/* We ignore the return code; if it fails, too bad */</span><br>driver-&gt;attach_adapter(adap);<br>&#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">i2c_del_adapter</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> i2c_adapter *adap)</span><br>&#123;<br>...<br>list_for_each(item,&amp;drivers) &#123;<br>driver = list_entry(item, <span class="hljs-keyword">struct</span> i2c_driver, <span class="hljs-built_in">list</span>);<br><span class="hljs-keyword">if</span> (driver-&gt;detach_adapter)<br><span class="hljs-keyword">if</span> ((res = driver-&gt;detach_adapter(adap))) &#123;<br>&#125;<br>&#125;<br>...<br>list_for_each_safe(item, _n, &amp;adap-&gt;clients) &#123;<br>client = list_entry(item, <span class="hljs-keyword">struct</span> i2c_client, <span class="hljs-built_in">list</span>);<br> <br><span class="hljs-keyword">if</span> ((res=client-&gt;driver-&gt;detach_client(client))) &#123;<br> <br>&#125;<br>&#125;<br>...<br>device_remove_file(&amp;adap-&gt;dev, &amp;dev_attr_name);<br>device_unregister(&amp;adap-&gt;dev);<br> <br>&#125;<br></code></pre></td></tr></table></figure><p>i2c-davinci.c是实现与硬件相关功能的代码集合，这部分是与平台相关的，也叫做i2c总线驱动，这部分代码是这样添加到系统中的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">platform_driver</span> <span class="hljs-title">davinci_i2c_driver</span> =</span> &#123;<br>.probe= davinci_i2c_probe,<br>.remove= davinci_i2c_remove,<br>.driver= &#123;<br>.name= <span class="hljs-string">&quot;i2c_davinci&quot;</span>,<br>.owner= THIS_MODULE,<br>&#125;,<br>&#125;;<br> <br><span class="hljs-comment">/* I2C may be needed to bring up other drivers */</span><br><span class="hljs-type">static</span> <span class="hljs-type">int</span> __init <span class="hljs-title function_">davinci_i2c_init_driver</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-keyword">return</span> platform_driver_register(&amp;davinci_i2c_driver);<br>&#125;<br>subsys_initcall(davinci_i2c_init_driver);<br> <br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __exit <span class="hljs-title function_">davinci_i2c_exit_driver</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>platform_driver_unregister(&amp;davinci_i2c_driver);<br>&#125;<br>module_exit(davinci_i2c_exit_driver);<br></code></pre></td></tr></table></figure><p>并且，i2c适配器控制硬件发送接收数据的函数在这里赋值给i2c-algorithm，i2c_davinci_xfer稍加修改就可以在裸机中控制i2c适配器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">i2c_algorithm</span> <span class="hljs-title">i2c_davinci_algo</span> =</span> &#123;<br>.master_xfer= i2c_davinci_xfer,<br>.functionality= i2c_davinci_func,<br>&#125;;<br></code></pre></td></tr></table></figure><p>然后在davinci_i2c_probe函数中，将i2c_davinci_algo添加到添加到algorithm系统中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">adap-&gt;algo = &amp;i2c_davinci_algo;<br></code></pre></td></tr></table></figure><h3 id="梳理图"><a href="#梳理图" class="headerlink" title="梳理图"></a>梳理图</h3><p>有时候代码比任何文字描述都来得直接，但是过多的代码展示反而让人觉得枯燥。这个时候，需要一幅图来梳理一下上面的内容:</p><p><img src="/imgs/I2C%E9%A9%B1%E5%8A%A8%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/I2C%E9%80%82%E9%85%8D%E5%99%A8Dm368%E7%A1%AC%E4%BB%B6.png"></p><p>linux内核和芯片提供商为我们的的驱动程序提供了 i2c驱动的框架，以及框架底层与硬件相关的代码的实现。剩下的就是针对挂载在i2c两线上的i2c设备了device，如at24c02，例如ov2715，而编写的具体设备驱动了，这里的设备就是硬件接口外挂载的设备，而非硬件接口本身（soc硬件接口本身的驱动可以理解为总线驱动）。</p><p>在理解了i2c驱动架构后，我们接下来再作两方面的分析工作：一是具体的i2c设备ov2715驱动源码分析，二是davinci平台的i2c总线驱动源码。</p><h4 id="ov2715设备i2c驱动源码分析"><a href="#ov2715设备i2c驱动源码分析" class="headerlink" title="ov2715设备i2c驱动源码分析"></a>ov2715设备i2c驱动源码分析</h4><p>ov2715为200万的CMOS Sensor，芯片的寄存器控制通过i2c接口完成，i2c设备地址为0x6c，寄存器地址为16位两个字节，寄存器值为8位一个字节，可以理解为一般的字符设备。<br>该驱动程序并非只能用于ov2715，因此源码中存在支持多个设备地址的机制。<br>该字符设备的用到的结构体有两个，如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><br>  <span class="hljs-type">int</span> devAddr;<br><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">i2c_client</span> <span class="hljs-title">client</span>;</span>   <span class="hljs-comment">//!&lt; Data structure containing general access routines.</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">i2c_driver</span> <span class="hljs-title">driver</span>;</span>   <span class="hljs-comment">//!&lt; Data structure containing information specific to each client.</span><br><br>  <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>  <span class="hljs-type">int</span> nameSize;<br>  <span class="hljs-type">int</span> users;<br><br>&#125; I2C_Obj;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> I2C_DEV_MAX_ADDR  (0xFF)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> I2C_TRANSFER_BUF_SIZE_MAX   (256)</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br> <br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cdev</span> <span class="hljs-title">cdev</span>;</span>             <span class="hljs-comment">/* Char device structure    */</span><br>  <span class="hljs-type">int</span>     major;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">semaphore</span> <span class="hljs-title">semLock</span>;</span><br>    <br>  I2C_Obj *pObj[I2C_DEV_MAX_ADDR];<br> <br>  <span class="hljs-type">uint8_t</span> reg[I2C_TRANSFER_BUF_SIZE_MAX];<br>  <span class="hljs-type">uint16_t</span> reg16[I2C_TRANSFER_BUF_SIZE_MAX];<br>  <span class="hljs-type">uint8_t</span> buffer[I2C_TRANSFER_BUF_SIZE_MAX*<span class="hljs-number">4</span>];<br>  <br>&#125; I2C_Dev;<br></code></pre></td></tr></table></figure><p>一个I2C_Obj描述一个设备，devAddr保存该设备的地址，I2C_Obj内嵌到结构体I2C_Dev，I2C_Dev管理该驱动所支持的所有设备，尽管支持多个设备，但i2c适配器只有一个，因此需要一个信号量semLock来保护该共享资源，同时只能向一个设备读写数据。成员变量cdev是我们所熟知的，每个字符设备驱动中几乎总会有一个结构体包含它，major用于保存该驱动的主设备编号，reg数组为寄存器地址为8位的寄存器地址缓冲区，reg16为寄存器地址为16的寄存器地址缓冲区。同时可以读写多个寄存器地址的值。buffer为读写的寄存器值<br>使用I2C_Dev构建一个全局变量gI2C_dev，在驱动的多个地方均需要它。<br>下面先从字符设备的基本框架入手，然后深入该驱动的细节部分。<br>首先是该字符设备的初始化和退出函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">I2C_devInit</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>  <span class="hljs-type">int</span>     result, i;<br>  <span class="hljs-type">dev_t</span>   dev = <span class="hljs-number">0</span>;<br> <br>  result = alloc_chrdev_region(&amp;dev, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, I2C_DRV_NAME);<span class="hljs-comment">//分配字符设备空间</span><br>  <br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;I2C_DEV_MAX_ADDR; i++)<br>  &#123;<br>    gI2C_dev.pObj[i]=<span class="hljs-literal">NULL</span>;<br>  &#125;<br> <br>  gI2C_dev.major = MAJOR(dev);<span class="hljs-comment">//保存设备主编号</span><br>  sema_init(&amp;gI2C_dev.semLock, <span class="hljs-number">1</span>);<span class="hljs-comment">//信号量初始化</span><br>  cdev_init(&amp;gI2C_dev.cdev, &amp;gI2C_devFileOps);<span class="hljs-comment">//使用gI2C_devFileOps初始化该字符设备，gI2C_devFileOps见下文</span><br>  gI2C_dev.cdev.owner = THIS_MODULE;<span class="hljs-comment">//常规赋值</span><br> gI2C_dev.cdev.ops = &amp;gI2C_devFileOps;<span class="hljs-comment">//常规赋值 result = cdev_add(&amp;gI2C_dev.cdev, dev, 1);//添加设备到字符设备中 return result;&#125;void I2C_devExit(void)&#123; dev_t devno = MKDEV(gI2C_dev.major, 0); cdev_del(&amp;gI2C_dev.cdev);//从字符设备中删除该设备 unregister_chrdev_region(devno, 1);//回收空间&#125;</span><br>gI2c_devFileOps全局变量，驱动初始化会用到该结构体变量<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">file_operations</span> <span class="hljs-title">gI2C_devFileOps</span> =</span> &#123;<br>  .owner = THIS_MODULE,<br>  .open = I2C_devOpen,<br>  .release = I2C_devRelease,<br>  .ioctl = I2C_devIoctl,<br>&#125;;<br></code></pre></td></tr></table></figure><p>该驱动只实现了三个函数,open,release和ioctl，对于i2c设备来说，这已经足够了。<br>在I2C_devOpen和I2C_devOpen中并没有做实际的工作，重要的工作均在I2C_devIoctl这个ioctl中完成。I2C_devIoctl代码展示（将影响结构条理的代码去掉，稍后在做详细分析）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">I2C_devIoctl</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> inode *inode, <span class="hljs-keyword">struct</span> file *filp, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> cmd, <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> arg)</span><br>&#123;<br>  I2C_Obj *pObj;<br>  <span class="hljs-type">int</span> status=<span class="hljs-number">0</span>;<br>  I2C_TransferPrm transferPrm;<br>  <br>  pObj = (I2C_Obj *)filp-&gt;private_data;<br> <br>  <span class="hljs-keyword">if</span>(!I2C_IOCTL_CMD_IS_VALID(cmd))<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>  cmd = I2C_IOCTL_CMD_GET(cmd);<span class="hljs-comment">//cmd命令转换，防止混淆，具体原因参见上一篇文章：ioctl中的cmd</span><br> <br>  down_interruptible(&amp;gI2C_dev.semLock);      <span class="hljs-comment">//信号量down</span><br>  <br>  <span class="hljs-keyword">switch</span>(cmd)<br>  &#123;<br>    <span class="hljs-keyword">case</span> I2C_CMD_SET_DEV_ADDR:<span class="hljs-comment">//命令1，设置设备地址</span><br>      filp-&gt;private_data = I2C_create(arg);<br> <br>    <span class="hljs-keyword">case</span> I2C_CMD_WRITE:  <span class="hljs-comment">//命令2，写寄存器值</span><br>      <br>      status = copy_from_user(&amp;transferPrm, (<span class="hljs-type">void</span> *)arg, <span class="hljs-keyword">sizeof</span>(transferPrm));<br>      ...<br>            <br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> I2C_CMD_READ:  <span class="hljs-comment">//命令3，读寄存器值</span><br>    <br>      status = copy_from_user(&amp;transferPrm, (<span class="hljs-type">void</span> *)arg, <span class="hljs-keyword">sizeof</span>(transferPrm));<br>      ...<br>      <br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>      status = <span class="hljs-number">-1</span>;<br>      <span class="hljs-keyword">break</span>;    <br>  &#125;<br> <br>  up(&amp;gI2C_dev.semLock);      <span class="hljs-comment">//信号量up</span><br> <br>  <span class="hljs-keyword">return</span> status;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上三个命令中最重要最复杂的是第一个I2C_CMD_SET_DEV_ADDR，设置设备地址，之所以重要和复杂，因为在I2C_create()函数中，将通过i2c-core提供的函数把该驱动程序和底层的i2c_adapter联系起来。下面是I2C_create()函数源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">I2C_create</span><span class="hljs-params">(<span class="hljs-type">int</span> devAddr)</span> &#123;<br> <br>    <span class="hljs-type">int</span> ret;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">i2c_driver</span> *<span class="hljs-title">driver</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">i2c_client</span> *<span class="hljs-title">client</span> =</span> client;<br>    I2C_Obj *pObj;<br> <br>    devAddr &gt;&gt;= <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-keyword">if</span>(devAddr&gt;I2C_DEV_MAX_ADDR)  <span class="hljs-comment">//变量合法性判断</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>   <br>    <span class="hljs-keyword">if</span>(gI2C_dev.pObj[devAddr]!=<span class="hljs-literal">NULL</span>) &#123;<span class="hljs-comment">//变量合法性判断，如果该地址的设备已经创建，则调过，防止上层错误调用</span><br>      <span class="hljs-comment">// already allocated, increment user count, and return the allocated handle</span><br>      gI2C_dev.pObj[devAddr]-&gt;users++;<br>      <span class="hljs-keyword">return</span> gI2C_dev.pObj[devAddr];<br>    &#125;<br>    <br>    pObj = (<span class="hljs-type">void</span>*)kmalloc( <span class="hljs-keyword">sizeof</span>(I2C_Obj), GFP_KERNEL); <span class="hljs-comment">//为pObj分配空间</span><br>    gI2C_dev.pObj[devAddr] = pObj;  <span class="hljs-comment">//将分配的空间地址保存在全局变量里</span><br>    <span class="hljs-built_in">memset</span>(pObj, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(I2C_Obj));<br>  <br>    pObj-&gt;client.adapter = <span class="hljs-literal">NULL</span>;<br>    pObj-&gt;users++;    <span class="hljs-comment">//用户基数，初始化为0，当前设为1</span><br>    pObj-&gt;devAddr = devAddr;  <span class="hljs-comment">//保存设备地址</span><br>    <br>    gI2C_curAddr = pObj-&gt;devAddr;  <span class="hljs-comment">//gI2C_curAddr为全局的整型变量，用于保存当前的设备地址</span><br>    driver = &amp;pObj-&gt;driver;  <span class="hljs-comment">//将成员变量driver单独抽取出来，因为线面要使用driver来初始化驱动</span><br> <br>    pObj-&gt;nameSize=<span class="hljs-number">0</span>;<span class="hljs-comment">//i2c设备名称，注意，这里不是在/dev下面的设备节点名</span><br>    pObj-&gt;name[pObj-&gt;nameSize++] = <span class="hljs-string">&#x27;I&#x27;</span>;<br>    pObj-&gt;name[pObj-&gt;nameSize++] = <span class="hljs-string">&#x27;2&#x27;</span>;<br>    pObj-&gt;name[pObj-&gt;nameSize++] = <span class="hljs-string">&#x27;C&#x27;</span>;<br>    pObj-&gt;name[pObj-&gt;nameSize++] = <span class="hljs-string">&#x27;_&#x27;</span>;   <br>    pObj-&gt;name[pObj-&gt;nameSize++] = <span class="hljs-string">&#x27;A&#x27;</span> + ((pObj-&gt;devAddr &gt;&gt; <span class="hljs-number">0</span>) &amp; <span class="hljs-number">0xF</span>);<br>    pObj-&gt;name[pObj-&gt;nameSize++] = <span class="hljs-string">&#x27;B&#x27;</span> + ((pObj-&gt;devAddr &gt;&gt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xF</span>);<br>    pObj-&gt;name[pObj-&gt;nameSize++] = <span class="hljs-number">0</span>;<br> <br>    driver-&gt;driver.name = pObj-&gt;name; <span class="hljs-comment">//保存刚才设置的name</span><br>    driver-&gt;id = I2C_DRIVERID_MISC;<br>    driver-&gt;attach_adapter = I2C_attachAdapter;   <span class="hljs-comment">//这个很重要，将驱动连接到i2c适配器上，在后面分析</span><br>    driver-&gt;detach_client = I2C_detachClient;<span class="hljs-comment">//这个很重，在后面分析</span><br> <br>    <span class="hljs-keyword">if</span>((ret = i2c_add_driver(driver)))<span class="hljs-comment">//使用i2c-core（i2c_register_driver函数）的接口，注册该驱动，i2c_add_driver实质调用了driver_register()</span><br>    &#123;<br>        printk( KERN_ERR <span class="hljs-string">&quot;I2C: ERROR: Driver registration failed (address=%x), module not inserted.\n&quot;</span>, pObj-&gt;devAddr);<br>    &#125;<br> <br>    <span class="hljs-keyword">if</span>(ret&lt;<span class="hljs-number">0</span>) &#123;<br> <br>      gI2C_dev.pObj[pObj-&gt;devAddr] = <span class="hljs-literal">NULL</span>;<br>      kfree(pObj);    <br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pObj;<br>&#125;<br></code></pre></td></tr></table></figure><p>其他两个命令是I2C_CMD_WRITE和I2C_CMD_READ，这个比较简单，只需设置寄存器地址的大小以及寄存器值的大小，然后通过i2c-core 提供的i2c_transfer()函数发送即可。例如I2C_wirte()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">I2C_write</span><span class="hljs-params">(I2C_Obj *pObj, <span class="hljs-type">uint8_t</span> *reg, <span class="hljs-type">uint8_t</span> *buffer, <span class="hljs-type">uint8_t</span> count, <span class="hljs-type">uint8_t</span> dataSize)</span><br>&#123;<br>  <span class="hljs-type">uint8_t</span> i;<br>  <span class="hljs-type">int</span> err;<br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">i2c_client</span> *<span class="hljs-title">client</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">i2c_msg</span> <span class="hljs-title">msg</span>[1];</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> data[<span class="hljs-number">8</span>];<br> <br>  <span class="hljs-keyword">if</span>(pObj==<span class="hljs-literal">NULL</span>)<br>    <span class="hljs-keyword">return</span> -ENODEV;<br> <br>  client = &amp;pObj-&gt;client;<span class="hljs-comment">//得到client信息</span><br>  <span class="hljs-keyword">if</span>(!client-&gt;adapter)<br>    <span class="hljs-keyword">return</span> -ENODEV;  <br>  <br>  <span class="hljs-keyword">if</span>(dataSize&lt;=<span class="hljs-number">0</span>||dataSize&gt;<span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <br>  <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;count; i++) &#123;<br>  <br>    msg-&gt;addr = client-&gt;addr;<span class="hljs-comment">//设置要写的i2c设备地址</span><br>    msg-&gt;flags= <span class="hljs-number">0</span>;<span class="hljs-comment">//一直为0</span><br>    msg-&gt;buf  = data;<span class="hljs-comment">//date为准备i2c通信的缓冲区，这个缓冲区除了不包含设备地址外，要包括要目标寄存器地址，和要写入该寄存器的值</span><br><br>    data[<span class="hljs-number">0</span>] = reg[i];<span class="hljs-comment">//寄存器地址赋值</span><br><br>    <span class="hljs-keyword">if</span>(dataSize==<span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//寄存器值长度为1</span><br>       data[<span class="hljs-number">1</span>]  = buffer[i];<span class="hljs-comment">//寄存器值赋值</span><br>       msg-&gt;len = <span class="hljs-number">2</span>;  <span class="hljs-comment">//设置data长度为2</span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dataSize==<span class="hljs-number">2</span>) &#123;<span class="hljs-comment">//寄存器值长度为2</span><br>       data[<span class="hljs-number">1</span>] = buffer[<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>];<br>       data[<span class="hljs-number">2</span>] = buffer[<span class="hljs-number">2</span>*i];<br>       msg-&gt;len = <span class="hljs-number">3</span>;<br>    &#125; <br>    err = i2c_transfer(client-&gt;adapter, msg, <span class="hljs-number">1</span>);<span class="hljs-comment">//调用i2c-core中的i2c_transfer发送i2c数据</span><br>    <span class="hljs-keyword">if</span>( err &lt; <span class="hljs-number">0</span> )<br>      <span class="hljs-keyword">return</span> err;<br>    &#125;<br>  <br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>重点分析上一段代码void *I2C_create(int devAddr)函数中的i2c_driver结构体部分的代码，下面的代码是从上面I2C_create抽取出来的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">driver-&gt;driver.name = pObj-&gt;name;<br>driver-&gt;id = I2C_DRIVERID_MISC;<br>driver-&gt;attach_adapter = I2C_attachAdapter;<br>driver-&gt;detach_client = I2C_detachClient;<br></code></pre></td></tr></table></figure><p>在i2c_driver结构体中针对attach_adapter有这样的说明：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Notifies the driver that a new bus has appeared. This routine</span><br><span class="hljs-comment"> * can be used by the driver to test if the bus meets its conditions</span><br><span class="hljs-comment"> * &amp; seek for the presence of the chip(s) it supports. If found, it </span><br><span class="hljs-comment"> * registers the client(s) that are on the bus to the i2c admin. via</span><br><span class="hljs-comment"> * i2c_attach_client.</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>意思是通知驱动，i2c适配器已经就绪了，这时可以讲device的driver连接到总线bus上。所以I2C_attachAdapter的作用就是检测client，然后将client连接上来。attach_adapter和detach_client由内核驱动自动调用，我们只需在调用的时候实现必要的功能即可，如下代码展示</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">I2C_attachAdapter</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> i2c_adapter *adapter)</span><br>&#123;<br>    <span class="hljs-keyword">return</span> I2C_detectClient(adapter, gI2C_curAddr);<br>&#125;<br> <br><span class="hljs-type">int</span> <span class="hljs-title function_">I2C_detectClient</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> i2c_adapter *adapter, <span class="hljs-type">int</span> address)</span><br>&#123;<br>    I2C_Obj *pObj;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">i2c_client</span> *<span class="hljs-title">client</span>;</span><br>    <span class="hljs-type">int</span> err = <span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">if</span>(address &gt; I2C_DEV_MAX_ADDR) &#123;<br>      printk( KERN_ERR <span class="hljs-string">&quot;I2C: ERROR: Invalid device address %x\n&quot;</span>, address);        <br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>      <br>    pObj = gI2C_dev.pObj[address];<br>    <span class="hljs-keyword">if</span>(pObj==<span class="hljs-literal">NULL</span>) &#123;<br>      printk( KERN_ERR <span class="hljs-string">&quot;I2C: ERROR: Object not found for address %x\n&quot;</span>, address);    <br>      <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br> <br>    client = &amp;pObj-&gt;client;<br> <br>    <span class="hljs-keyword">if</span>(client-&gt;adapter)<br>      <span class="hljs-keyword">return</span> -EBUSY;  <span class="hljs-comment">/* our client is already attached */</span><br> <br>    <span class="hljs-built_in">memset</span>(client, <span class="hljs-number">0x00</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> i2c_client));<br>    client-&gt;addr = pObj-&gt;devAddr;<br>    client-&gt;adapter = adapter;<br>    client-&gt;driver = &amp;pObj-&gt;driver;<br> <br>    <span class="hljs-keyword">if</span>((err = i2c_attach_client(client)))<br>    &#123;<br>        printk( KERN_ERR <span class="hljs-string">&quot;I2C: ERROR: Couldn&#x27;t attach %s (address=%x)\n&quot;</span>, pObj-&gt;name, pObj-&gt;devAddr);<br>        client-&gt;adapter = <span class="hljs-literal">NULL</span>;<br>        <span class="hljs-keyword">return</span> err;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终I2C_detectClient()函数调用了i2c-core中的i2c_attach_client，从名字上就能看出什么意思，连接client设备。<br>当内核驱动准备删除该驱动时会自动调用i2c_driver的成员函数：detech_client，因此我们需要实现删除client设备的函数然后赋值给改函数指针，detech_client的说明如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* tells the driver that a client is about to be deleted &amp; gives it </span><br><span class="hljs-comment"> * the chance to remove its private data. Also, if the client struct</span><br><span class="hljs-comment"> * has been dynamically allocated by the driver in the function above,</span><br><span class="hljs-comment"> * it must be freed here.</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>下面是detech_client调用的函数代码清单，该函数最终调用了i2c-core提供的i2c_detach_client，用于取消client设备的连接</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">I2C_detachClient</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> i2c_client *client)</span><br>&#123;<br>    <span class="hljs-type">int</span> err;<br><span class="hljs-keyword">if</span>(!client-&gt;adapter)<br>    <span class="hljs-keyword">return</span> -ENODEV; <span class="hljs-comment">/* our client isn&#x27;t attached */</span><br> <br><span class="hljs-keyword">if</span>((err = i2c_detach_client(client))) &#123;<br>    printk( KERN_ERR <span class="hljs-string">&quot;Client deregistration failed (address=%x), client not detached.\n&quot;</span>, client-&gt;addr);<br>    <span class="hljs-keyword">return</span> err;<br>&#125;<br> <br>client-&gt;adapter = <span class="hljs-literal">NULL</span>;<br> <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>}</p><p><small>misslyh20080512202305122023080719980106202309281520825879280398965</small></p>]]></content>
    
    
    <categories>
      
      <category>Linux Kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
